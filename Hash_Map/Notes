/*
A Map in Java is a powerful data structure used to store key-value pairs, where each key maps to exactly one value.
It’s perfect for fast lookups, organizing data by identifiers, and modeling relationships.
 */

/*
Why Use Map!...
• Fast retrieval: O(1) access time with HashMap
• Organized data: Easy to model relationships (e.g., user → books)(book id -> book)etc.
• Avoids duplication: Keys are unique, preventing redundant entries
• Flexible: Can store complex objects as values (like Book, User, etc.)
 */

//HashMap is not synchronized.

/* Basic Components of HashMap
1-> Key - The identifier used to retrieve the value
2-> Value - The data associated with the value.
3-> Bucket - A place where key-value pairs are stored. Think of buckets as cells in a list (Array of linked list, but after java8 , it started using balanced binary search tree ).
4-> HashFunction - Convert a key into an index for storage.
 */

/*
import java.util.HashMap;
import java.util.Map;

class Main
{
    public static void main(String[] args) {
        HashMap<Integer,String> map = new HashMap<>();
        //Add elements.
        map.put(1,"Alex");
        map.put(2,"John");
        map.put(3,"Shawn");
        map.put(4,"George");
        map.put(6,"Mason");

        //Accessing value using key.
        System.out.println(map);
        System.out.println(map.get(3));

        //Check if key or value is present or not
        System.out.println(map.containsKey(2));
        System.out.println(map.containsValue("Shawn"));

        //Run a loop
        for(int x : map.keySet())
        {
            System.out.println(map.get(x));
        }

        for (Map.Entry<Integer, String> integerStringEntry : map.entrySet()) {
            System.out.println(integerStringEntry.getKey()+":"+integerStringEntry.getValue());
        }

        //Remove element.
        System.out.println("Remove: "+map.remove(2));



    }
}*/

import java.util.HashMap;

class Student {
    String name;
    int id;
    public Student(){}

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    @Override
    public String toString() {
        return "Student{" +
                "name='" + name + '\'' +
                ", id=" + id +
                '}';
    }
}

public class Main
{
    public static void main(String[] args) {
        Student s1 = new Student();
        s1.setName("Alex");
        s1.setId(12);

        Student s2 = new Student();
        s2.setName("John");
        s2.setId(1);

        HashMap<Student , String> map = new HashMap<>();
        map.put(s1,"Computer Science");
        map.put(s2,"Mechanical");
        map.put(s1,"Design");
        System.out.println(map);

    }
}
